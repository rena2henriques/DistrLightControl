//Compile as:  g++ -std=c++11 async_tcp_echo_server.cpp -lpthread -lboost_system -o server
//Run in a separate terminal, before starting client : ./server 17000

//
// async_tcp_echo_server.cpp
// ~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Copyright (c) 2003-2011 Christopher M. Kohlhoff (chris at kohlhoff dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#include <cstdlib>
#include <iostream>
#include "command.h"
#include <boost/bind.hpp>
//#define BOOST_ASIO_ENABLE_HANDLER_TRACKING //<<--- for debug
#include <boost/asio.hpp>

using boost::asio::ip::tcp;

class Command Cmd;

class session {
public:
  session::session(boost::asio::io_service& io_service)
    : socket_(io_service), response_("") {
  }

  tcp::socket& session::socket()
  {
    return socket_;
  }

  void session::start()
  {
    socket_.async_read_some(boost::asio::buffer(request_, max_length),
        boost::bind(&session::handle_read, this, _1, _2 )); 
  }

private:
  void handle_read(const boost::system::error_code& error,
      size_t bytes_transferred) {
    if (!error) {

      std::cout << "received: " << request_ << endl;

      if (request_[0] == 'g') {
        // takes care of get requests
        response_ = Cmd.getCommand(request_);

        boost::asio::async_write(socket_, boost::asio::buffer(response_, response_.length()),
              boost::bind(&session::handle_write, this, boost::asio::placeholders::error));
        
      } else if (request_[0] == 'r'){

        response_ = Cmd.restartCommand();

        // sends the info to the client
        boost::asio::async_write(socket_, boost::asio::buffer(response_, response_.length()),
              boost::bind(&session::handle_write, this, boost::asio::placeholders::error));

      } else if (request_[0] == 's') {

        // gets the response requested
        response_ = Cmd.setCommand();

        // sends the info to the client
        boost::asio::async_write(socket_, boost::asio::buffer(response_, response_.length()),
              boost::bind(&session::handle_write, this, boost::asio::placeholders::error));

      } else if (request_[0] == 'b' || request_[0] == 'c' || request_[0] == 'd') {

        response_ = Cmd.streamCommand();

        // sends the info to the client
        boost::asio::async_write(socket_, boost::asio::buffer(response_, response_.length()),
              boost::bind(&session::handle_write, this, boost::asio::placeholders::error));

      } else if (request_[0] == '\n') {

        // do nothing
        boost::asio::async_write(socket_, boost::asio::buffer("Ping received."),
              boost::bind(&session::handle_write, this, boost::asio::placeholders::error));

      } else {
        // not a recognizable command 
        boost::asio::async_write(socket_, boost::asio::buffer("Request not found."),
              boost::bind(&session::handle_write, this, boost::asio::placeholders::error));
      }

      // echo
    /* boost::asio::async_write(socket_,
          boost::asio::buffer(request_, bytes_transferred),
          boost::bind(&session::handle_write, this, boost::asio::placeholders::error));*/

      memset(request_, 0, sizeof(request_));
    }
    else
    {
      delete this;
    }
  }

  void handle_write(const boost::system::error_code& error) {
    if (!error)
    {

      socket_.async_read_some(boost::asio::buffer(request_, max_length),
        boost::bind(&session::handle_read, this,
          boost::asio::placeholders::error,
            boost::asio::placeholders::bytes_transferred));

    }
    else
    {
      delete this;
    }
  }

  tcp::socket socket_;
  enum { max_length = 1024 };
  char request_[max_length];
  std::string response_;
};

class server {
public:
  server(boost::asio::io_service& io_service, short port)
    : io_service_(io_service),
      input_(io_service, ::dup(STDIN_FILENO)),
      input_buffer_(1024),
      acceptor_(io_service, tcp::endpoint(tcp::v4(), port))
  {
    start_accept();
    start_read_input();
  }

private:
  void start_accept() {

    session* new_session = new session(io_service_);
    acceptor_.async_accept(new_session->socket(),
        boost::bind(&server::handle_accept, this, new_session, _1));
  }

  void start_read_input() {

    // Read a line of input entered by the user.
    boost::asio::async_read_until(input_, input_buffer_, '\n', 
        boost::bind(&server::handle_read_input, this, _1, _2));
  }
  void handle_read_input(const boost::system::error_code& error,
      std::size_t length) {
    if (!error)
    {
       std::cout << &input_buffer_ << std::endl;
    }
    start_read_input();
  }

  void handle_accept(session* new_session,
      const boost::system::error_code& error)
  {
    if (!error)
    {
      new_session->start();
    }
    else
    {
      delete new_session;
    }

    start_accept();
  }

  boost::asio::io_service& io_service_;
  tcp::acceptor acceptor_;
  boost::asio::posix::stream_descriptor input_;
  boost::asio::streambuf input_buffer_;
};

int main(int argc, char* argv[])
{
  try {

    if (argc != 2) {

      std::cerr << "Usage: async_tcp_echo_server <port>\n";
      return 1;
    }

    boost::asio::io_service io_service;

    using namespace std; // For atoi.
    server s(io_service, atoi(argv[1]));

    io_service.run();
  }
  catch (std::exception& e) {
    std::cerr << "Exception: " << e.what() << "\n";
  }

  return 0;
}